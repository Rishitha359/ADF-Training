{
	"name": "DL_Cleaning",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Sql_User",
						"type": "DatasetReference"
					},
					"name": "UserTable"
				},
				{
					"dataset": {
						"referenceName": "DS_Sql_Event",
						"type": "DatasetReference"
					},
					"name": "EventTable"
				},
				{
					"dataset": {
						"referenceName": "DS_Sql_Booking",
						"type": "DatasetReference"
					},
					"name": "BookingTable"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_Sql",
						"type": "LinkedServiceReference"
					},
					"name": "CleanedUserTable"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sql",
						"type": "LinkedServiceReference"
					},
					"name": "CleanedEventTable"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sql",
						"type": "LinkedServiceReference"
					},
					"name": "CleanedBookingTable"
				}
			],
			"transformations": [
				{
					"name": "RemovingUserWithNoEmail"
				},
				{
					"name": "IdentifyingDuplicateRows"
				},
				{
					"name": "RemovingDuplicates"
				},
				{
					"name": "SelectingRequiredColumns"
				},
				{
					"name": "SortingRecords"
				},
				{
					"name": "ChangingTypeTimestampToDate"
				},
				{
					"name": "RemovingNoNameLocationEvents"
				},
				{
					"name": "IdentifyingDuplicates"
				},
				{
					"name": "RemovingDuplicateRecords"
				},
				{
					"name": "SelectReqColumns"
				},
				{
					"name": "SortRecords"
				},
				{
					"name": "LocatingDuplicates"
				},
				{
					"name": "RemoveDuplicates"
				},
				{
					"name": "SelectingRequiredColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          email as string,",
				"          password as string,",
				"          isAdmin as boolean,",
				"          name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> UserTable",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          date as timestamp,",
				"          description as string,",
				"          location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EventTable",
				"source(output(",
				"          id as integer,",
				"          userId as integer,",
				"          eventId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> BookingTable",
				"UserTable filter(!isNull(id) && !isNull(email)) ~> RemovingUserWithNoEmail",
				"RemovingUserWithNoEmail window(over(email),",
				"     asc(id, true),",
				"     Rank = rowNumber()) ~> IdentifyingDuplicateRows",
				"IdentifyingDuplicateRows filter(Rank==1) ~> RemovingDuplicates",
				"RemovingDuplicates select(mapColumn(",
				"          id,",
				"          name,",
				"          email,",
				"          password,",
				"          isAdmin",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectingRequiredColumns",
				"SelectingRequiredColumns sort(asc(id, true)) ~> SortingRecords",
				"EventTable cast(output(",
				"          date as date",
				"     ),",
				"     errors: true) ~> ChangingTypeTimestampToDate",
				"ChangingTypeTimestampToDate filter(!isNull(name) || !isNull(location)) ~> RemovingNoNameLocationEvents",
				"RemovingNoNameLocationEvents window(over(name,",
				"          location,",
				"          date),",
				"     asc(id, false),",
				"     Rank = rowNumber()) ~> IdentifyingDuplicates",
				"IdentifyingDuplicates filter(Rank==1) ~> RemovingDuplicateRecords",
				"RemovingDuplicateRecords select(mapColumn(",
				"          id,",
				"          name,",
				"          date,",
				"          description,",
				"          location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReqColumns",
				"SelectReqColumns sort(asc(id, true)) ~> SortRecords",
				"BookingTable window(over(id),",
				"     asc(id, true),",
				"     Rank = rowNumber()) ~> LocatingDuplicates",
				"LocatingDuplicates filter(Rank==1) ~> RemoveDuplicates",
				"RemoveDuplicates select(mapColumn(",
				"          id,",
				"          userId,",
				"          eventId",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectingRequiredColumn",
				"SortingRecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'User',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CleanedUserTable",
				"SortRecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'Event',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CleanedEventTable",
				"SelectingRequiredColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'Booking',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CleanedBookingTable"
			]
		}
	}
}