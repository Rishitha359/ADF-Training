{
	"name": "DF_Fact_And_Dimension",
	"properties": {
		"folder": {
			"name": "Web Scraping Data Flows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Prep_Product_Details",
						"type": "DatasetReference"
					},
					"name": "CleanedProductData"
				},
				{
					"dataset": {
						"referenceName": "DS_Prep_Product_Details",
						"type": "DatasetReference"
					},
					"name": "ProductDetails"
				},
				{
					"dataset": {
						"referenceName": "DS_Prep_Product_Details",
						"type": "DatasetReference"
					},
					"name": "ProductData"
				},
				{
					"dataset": {
						"referenceName": "DS_Prep_Product_Details",
						"type": "DatasetReference"
					},
					"name": "ProductDeta"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_Sql",
						"type": "LinkedServiceReference"
					},
					"name": "CategoryDimension"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sql",
						"type": "LinkedServiceReference"
					},
					"name": "SeriesDimension"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sql",
						"type": "LinkedServiceReference"
					},
					"name": "BrandDimension"
				},
				{
					"linkedService": {
						"referenceName": "LS_Sql",
						"type": "LinkedServiceReference"
					},
					"name": "FactTable"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "IdentifyingDuplicates"
				},
				{
					"name": "RemovingDuplicates"
				},
				{
					"name": "selectReqCol"
				},
				{
					"name": "FindingDuplicates"
				},
				{
					"name": "RemovingDuplicate"
				},
				{
					"name": "selectRequiredColumns"
				},
				{
					"name": "DuplicateFinding"
				},
				{
					"name": "DuplicateRemoving"
				},
				{
					"name": "RemovingRankCol"
				}
			],
			"scriptLines": [
				"source(output(",
				"          department_code as string,",
				"          category_code as string,",
				"          category_name as string,",
				"          series_code as float,",
				"          series_name as string,",
				"          brand_code as string,",
				"          brand_url_code as string,",
				"          brand_name as string,",
				"          min_standard_days_to_ship as integer,",
				"          max_standard_days_to_ship as integer,",
				"          direct_cart_type as integer,",
				"          price_check_less_flag as integer,",
				"          min_standard_unit_price as double,",
				"          max_standard_unit_price as double,",
				"          min_price_per_piece as double,",
				"          max_price_per_piece as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CleanedProductData",
				"source(output(",
				"          department_code as string,",
				"          category_code as string,",
				"          category_name as string,",
				"          series_code as float,",
				"          series_name as string,",
				"          brand_code as string,",
				"          brand_url_code as string,",
				"          brand_name as string,",
				"          min_standard_days_to_ship as integer,",
				"          max_standard_days_to_ship as integer,",
				"          direct_cart_type as integer,",
				"          price_check_less_flag as integer,",
				"          min_standard_unit_price as double,",
				"          max_standard_unit_price as double,",
				"          min_price_per_piece as double,",
				"          max_price_per_piece as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ProductDetails",
				"source(output(",
				"          department_code as string,",
				"          category_code as string,",
				"          category_name as string,",
				"          series_code as float,",
				"          series_name as string,",
				"          brand_code as string,",
				"          brand_url_code as string,",
				"          brand_name as string,",
				"          min_standard_days_to_ship as integer,",
				"          max_standard_days_to_ship as integer,",
				"          direct_cart_type as integer,",
				"          price_check_less_flag as integer,",
				"          min_standard_unit_price as double,",
				"          max_standard_unit_price as double,",
				"          min_price_per_piece as double,",
				"          max_price_per_piece as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ProductData",
				"source(output(",
				"          department_code as string,",
				"          category_code as string,",
				"          category_name as string,",
				"          series_code as float,",
				"          series_name as string,",
				"          brand_code as string,",
				"          brand_url_code as string,",
				"          brand_name as string,",
				"          min_standard_days_to_ship as integer,",
				"          max_standard_days_to_ship as integer,",
				"          direct_cart_type as integer,",
				"          price_check_less_flag as integer,",
				"          min_standard_unit_price as double,",
				"          max_standard_unit_price as double,",
				"          min_price_per_piece as double,",
				"          max_price_per_piece as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> ProductDeta",
				"CleanedProductData select(mapColumn(",
				"          department_code,",
				"          category_code,",
				"          category_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"ProductDetails select(mapColumn(",
				"          series_code,",
				"          series_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"ProductData select(mapColumn(",
				"          brand_code,",
				"          brand_url_code,",
				"          brand_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"ProductDeta select(mapColumn(",
				"          department_code,",
				"          category_code,",
				"          series_code,",
				"          brand_code,",
				"          min_standard_days_to_ship,",
				"          max_standard_days_to_ship,",
				"          direct_cart_type,",
				"          price_check_less_flag,",
				"          min_standard_unit_price,",
				"          max_standard_unit_price,",
				"          min_price_per_piece,",
				"          max_price_per_piece",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select1 window(over(department_code,",
				"          category_name,",
				"          category_code),",
				"     asc(department_code, true),",
				"     Rank = rowNumber()) ~> IdentifyingDuplicates",
				"IdentifyingDuplicates filter(Rank==1) ~> RemovingDuplicates",
				"RemovingDuplicates select(mapColumn(",
				"          department_code,",
				"          category_code,",
				"          category_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectReqCol",
				"select2 window(over(series_code),",
				"     asc(series_code, true),",
				"     Rank = rowNumber()) ~> FindingDuplicates",
				"FindingDuplicates filter(Rank==1) ~> RemovingDuplicate",
				"RemovingDuplicate select(mapColumn(",
				"          series_code,",
				"          series_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredColumns",
				"select3 window(over(brand_code,",
				"          brand_url_code),",
				"     asc(brand_code, true),",
				"     Rank = rowNumber()) ~> DuplicateFinding",
				"DuplicateFinding filter(Rank==1) ~> DuplicateRemoving",
				"DuplicateRemoving select(mapColumn(",
				"          brand_code,",
				"          brand_url_code,",
				"          brand_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemovingRankCol",
				"selectReqCol sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dim',",
				"     tableName: 'Category',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CategoryDimension",
				"selectRequiredColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dim',",
				"     tableName: 'Series',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SeriesDimension",
				"RemovingRankCol sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dim',",
				"     tableName: 'Brand',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> BrandDimension",
				"select4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'fact',",
				"     tableName: 'ProductData',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> FactTable"
			]
		}
	}
}