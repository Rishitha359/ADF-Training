{
	"name": "DF_Prep",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_output_customerdb",
						"type": "DatasetReference"
					},
					"name": "CustomerDetails"
				},
				{
					"dataset": {
						"referenceName": "DS_output_orderdb",
						"type": "DatasetReference"
					},
					"name": "OrderDetails"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_SQL",
						"type": "LinkedServiceReference"
					},
					"name": "CleanedCustomerData"
				},
				{
					"linkedService": {
						"referenceName": "LS_SQL",
						"type": "LinkedServiceReference"
					},
					"name": "CleanedOrderData"
				}
			],
			"transformations": [
				{
					"name": "RetrievingNotNullCustomerIdRecords"
				},
				{
					"name": "RemovingDuplicates"
				},
				{
					"name": "FindingDuplicates"
				},
				{
					"name": "RetrievingNotNullOrderIdRecords"
				},
				{
					"name": "FindingDuplicate"
				},
				{
					"name": "RemoveDuplicates"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as integer,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CustomerDetails",
				"source(output(",
				"          OrderID as integer,",
				"          ProductID as string,",
				"          ProductName as string,",
				"          Quantity as integer,",
				"          OrderTimestamp as date,",
				"          Price as float,",
				"          CustomerID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> OrderDetails",
				"CustomerDetails filter(!isNull(CustomerID)||CustomerID!='NULL') ~> RetrievingNotNullCustomerIdRecords",
				"FindingDuplicates filter(Rank==1) ~> RemovingDuplicates",
				"RetrievingNotNullCustomerIdRecords window(over(CustomerID),",
				"     asc(CustomerID, true),",
				"     Rank = rowNumber()) ~> FindingDuplicates",
				"OrderDetails filter(!isNull(OrderID)) ~> RetrievingNotNullOrderIdRecords",
				"RetrievingNotNullOrderIdRecords window(over(OrderID),",
				"     asc(OrderID, true),",
				"     Rank = rowNumber()) ~> FindingDuplicate",
				"FindingDuplicate filter(Rank==1) ~> RemoveDuplicates",
				"RemovingDuplicates sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'CustomerDetails',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CleanedCustomerData",
				"RemoveDuplicates sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'prep',",
				"     tableName: 'OrderDetails',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     recreate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> CleanedOrderData"
			]
		}
	}
}