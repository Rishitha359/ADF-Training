{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfMiniProject001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_Cleaning_Data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "FullStack Data Flows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Sql_User",
								"type": "DatasetReference"
							},
							"name": "UserTable"
						},
						{
							"dataset": {
								"referenceName": "DS_Sql_Event",
								"type": "DatasetReference"
							},
							"name": "EventTable"
						},
						{
							"dataset": {
								"referenceName": "DS_Sql_Booking",
								"type": "DatasetReference"
							},
							"name": "BookingTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "CleanedUserTable"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "CleanedEventTable"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "CleanedBookingTable"
						}
					],
					"transformations": [
						{
							"name": "RemovingUserWithNoEmail"
						},
						{
							"name": "IdentifyingDuplicateRows"
						},
						{
							"name": "RemovingDuplicates"
						},
						{
							"name": "SelectingRequiredColumns"
						},
						{
							"name": "SortingRecords"
						},
						{
							"name": "ChangingTypeTimestampToDate"
						},
						{
							"name": "RemovingNoNameLocationEvents"
						},
						{
							"name": "IdentifyingDuplicates"
						},
						{
							"name": "RemovingDuplicateRecords"
						},
						{
							"name": "SelectReqColumns"
						},
						{
							"name": "SortRecords"
						},
						{
							"name": "LocatingDuplicates"
						},
						{
							"name": "RemoveDuplicates"
						},
						{
							"name": "SelectingRequiredColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          email as string,",
						"          password as string,",
						"          isAdmin as boolean,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> UserTable",
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          date as timestamp,",
						"          description as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EventTable",
						"source(output(",
						"          id as integer,",
						"          userId as integer,",
						"          eventId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> BookingTable",
						"UserTable filter(!isNull(id) && !isNull(email)) ~> RemovingUserWithNoEmail",
						"RemovingUserWithNoEmail window(over(email),",
						"     asc(id, true),",
						"     Rank = rowNumber()) ~> IdentifyingDuplicateRows",
						"IdentifyingDuplicateRows filter(Rank==1) ~> RemovingDuplicates",
						"RemovingDuplicates select(mapColumn(",
						"          id,",
						"          name,",
						"          email,",
						"          password,",
						"          isAdmin",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingRequiredColumns",
						"SelectingRequiredColumns sort(asc(id, true)) ~> SortingRecords",
						"EventTable cast(output(",
						"          date as date",
						"     ),",
						"     errors: true) ~> ChangingTypeTimestampToDate",
						"ChangingTypeTimestampToDate filter(!isNull(name) || !isNull(location)) ~> RemovingNoNameLocationEvents",
						"RemovingNoNameLocationEvents window(over(name,",
						"          location,",
						"          date),",
						"     asc(id, false),",
						"     Rank = rowNumber()) ~> IdentifyingDuplicates",
						"IdentifyingDuplicates filter(Rank==1) ~> RemovingDuplicateRecords",
						"RemovingDuplicateRecords select(mapColumn(",
						"          id,",
						"          name,",
						"          date,",
						"          description,",
						"          location",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqColumns",
						"SelectReqColumns sort(asc(id, true)) ~> SortRecords",
						"BookingTable window(over(id),",
						"     asc(id, true),",
						"     Rank = rowNumber()) ~> LocatingDuplicates",
						"LocatingDuplicates filter(Rank==1) ~> RemoveDuplicates",
						"RemoveDuplicates select(mapColumn(",
						"          id,",
						"          userId,",
						"          eventId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectingRequiredColumn",
						"SortingRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'User',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CleanedUserTable",
						"SortRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'Event',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CleanedEventTable",
						"SelectingRequiredColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'Booking',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CleanedBookingTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Reporting_Data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "FullStack Data Flows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Prep_User",
								"type": "DatasetReference"
							},
							"name": "UserTable"
						},
						{
							"dataset": {
								"referenceName": "DS_Prep_Booking",
								"type": "DatasetReference"
							},
							"name": "BookingTable"
						},
						{
							"dataset": {
								"referenceName": "DS_Prep_Event",
								"type": "DatasetReference"
							},
							"name": "EventTable"
						},
						{
							"dataset": {
								"referenceName": "DS_Prep_Event",
								"type": "DatasetReference"
							},
							"name": "EventTab"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "LocationBasedEvents"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "MonthBasedEvents"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "CountOfBookingPerUser"
						}
					],
					"transformations": [
						{
							"name": "UserBookingJoin"
						},
						{
							"name": "BookingsPerUser"
						},
						{
							"name": "EventsBasedOnLocation"
						},
						{
							"name": "SortingRecords"
						},
						{
							"name": "EventBookingJoin"
						},
						{
							"name": "EventsBasedOnMonths"
						},
						{
							"name": "MonthColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          email as string,",
						"          password as string,",
						"          isAdmin as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> UserTable",
						"source(output(",
						"          id as integer,",
						"          userId as integer,",
						"          eventId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> BookingTable",
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          date as date,",
						"          description as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EventTable",
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          date as date,",
						"          description as string,",
						"          location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EventTab",
						"UserTable, BookingTable join(UserTable@id == BookingTable@id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> UserBookingJoin",
						"UserBookingJoin aggregate(groupBy(UserTable@id,",
						"          name),",
						"     count = count(BookingTable@id)) ~> BookingsPerUser",
						"EventTable aggregate(groupBy(location),",
						"     Count = count(id)) ~> EventsBasedOnLocation",
						"EventsBasedOnLocation sort(desc(Count, true),",
						"     asc(location, true)) ~> SortingRecords",
						"MonthColumn, BookingTable join(EventTab@id == eventId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> EventBookingJoin",
						"EventBookingJoin aggregate(groupBy(date),",
						"     Total_bookings = count(BookingTable@id)) ~> EventsBasedOnMonths",
						"EventTab derive(Month = month(date)) ~> MonthColumn",
						"SortingRecords sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'report',",
						"     tableName: 'LocationBasedEvents',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> LocationBasedEvents",
						"EventsBasedOnMonths sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'report',",
						"     tableName: 'MonthBasedEvents',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MonthBasedEvents",
						"BookingsPerUser sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'report',",
						"     tableName: 'CountPerUser',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CountOfBookingPerUser"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Move_Data_Blob_To_Sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MoveDataFromBlobToSql",
						"description": "Copying Product_details data from Blob storage to Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Product_Blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Product_Sql",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Web Scraping Pipelines"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Cleaning')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Web Scraping Data Flows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Product_Sql",
								"type": "DatasetReference"
							},
							"name": "ProductDetails"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "CleanedProductDetails"
						}
					],
					"transformations": [
						{
							"name": "ChangingDataTypes"
						},
						{
							"name": "FillingNullValues"
						}
					],
					"scriptLines": [
						"source(output(",
						"          department_code as string,",
						"          category_code as string,",
						"          category_name as string,",
						"          series_code as string,",
						"          series_name as string,",
						"          brand_code as string,",
						"          brand_url_code as string,",
						"          brand_name as string,",
						"          min_standard_days_to_ship as string,",
						"          max_standard_days_to_ship as string,",
						"          direct_cart_type as string,",
						"          price_check_less_flag as string,",
						"          min_standard_unit_price as string,",
						"          max_standard_unit_price as string,",
						"          min_price_per_piece as string,",
						"          max_price_per_piece as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductDetails",
						"ProductDetails cast(output(",
						"          series_code as float,",
						"          min_standard_days_to_ship as integer,",
						"          max_standard_days_to_ship as integer,",
						"          direct_cart_type as integer,",
						"          price_check_less_flag as integer,",
						"          min_standard_unit_price as float,",
						"          max_standard_unit_price as float,",
						"          min_price_per_piece as float,",
						"          max_price_per_piece as float",
						"     ),",
						"     errors: true) ~> ChangingDataTypes",
						"ChangingDataTypes derive(min_standard_unit_price = coalesce(min_standard_unit_price,0.0),",
						"          max_standard_unit_price = coalesce(max_standard_unit_price,0.0),",
						"          min_price_per_piece = coalesce(min_price_per_piece,0.0),",
						"          max_price_per_piece = coalesce(max_price_per_piece,0.0)) ~> FillingNullValues",
						"FillingNullValues sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'prep',",
						"     tableName: 'ProductDetails',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CleanedProductDetails"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Fact_And_Dimension')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Web Scraping Data Flows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Prep_Product_Details",
								"type": "DatasetReference"
							},
							"name": "CleanedProductData"
						},
						{
							"dataset": {
								"referenceName": "DS_Prep_Product_Details",
								"type": "DatasetReference"
							},
							"name": "ProductDetails"
						},
						{
							"dataset": {
								"referenceName": "DS_Prep_Product_Details",
								"type": "DatasetReference"
							},
							"name": "ProductData"
						},
						{
							"dataset": {
								"referenceName": "DS_Prep_Product_Details",
								"type": "DatasetReference"
							},
							"name": "ProductDeta"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "CategoryDimension"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "SeriesDimension"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "BrandDimension"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "FactTable"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						},
						{
							"name": "IdentifyingDuplicates"
						},
						{
							"name": "RemovingDuplicates"
						},
						{
							"name": "selectReqCol"
						},
						{
							"name": "FindingDuplicates"
						},
						{
							"name": "RemovingDuplicate"
						},
						{
							"name": "selectRequiredColumns"
						},
						{
							"name": "DuplicateFinding"
						},
						{
							"name": "DuplicateRemoving"
						},
						{
							"name": "RemovingRankCol"
						}
					],
					"scriptLines": [
						"source(output(",
						"          department_code as string,",
						"          category_code as string,",
						"          category_name as string,",
						"          series_code as float,",
						"          series_name as string,",
						"          brand_code as string,",
						"          brand_url_code as string,",
						"          brand_name as string,",
						"          min_standard_days_to_ship as integer,",
						"          max_standard_days_to_ship as integer,",
						"          direct_cart_type as integer,",
						"          price_check_less_flag as integer,",
						"          min_standard_unit_price as double,",
						"          max_standard_unit_price as double,",
						"          min_price_per_piece as double,",
						"          max_price_per_piece as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CleanedProductData",
						"source(output(",
						"          department_code as string,",
						"          category_code as string,",
						"          category_name as string,",
						"          series_code as float,",
						"          series_name as string,",
						"          brand_code as string,",
						"          brand_url_code as string,",
						"          brand_name as string,",
						"          min_standard_days_to_ship as integer,",
						"          max_standard_days_to_ship as integer,",
						"          direct_cart_type as integer,",
						"          price_check_less_flag as integer,",
						"          min_standard_unit_price as double,",
						"          max_standard_unit_price as double,",
						"          min_price_per_piece as double,",
						"          max_price_per_piece as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductDetails",
						"source(output(",
						"          department_code as string,",
						"          category_code as string,",
						"          category_name as string,",
						"          series_code as float,",
						"          series_name as string,",
						"          brand_code as string,",
						"          brand_url_code as string,",
						"          brand_name as string,",
						"          min_standard_days_to_ship as integer,",
						"          max_standard_days_to_ship as integer,",
						"          direct_cart_type as integer,",
						"          price_check_less_flag as integer,",
						"          min_standard_unit_price as double,",
						"          max_standard_unit_price as double,",
						"          min_price_per_piece as double,",
						"          max_price_per_piece as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductData",
						"source(output(",
						"          department_code as string,",
						"          category_code as string,",
						"          category_name as string,",
						"          series_code as float,",
						"          series_name as string,",
						"          brand_code as string,",
						"          brand_url_code as string,",
						"          brand_name as string,",
						"          min_standard_days_to_ship as integer,",
						"          max_standard_days_to_ship as integer,",
						"          direct_cart_type as integer,",
						"          price_check_less_flag as integer,",
						"          min_standard_unit_price as double,",
						"          max_standard_unit_price as double,",
						"          min_price_per_piece as double,",
						"          max_price_per_piece as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductDeta",
						"CleanedProductData select(mapColumn(",
						"          department_code,",
						"          category_code,",
						"          category_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"ProductDetails select(mapColumn(",
						"          series_code,",
						"          series_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ProductData select(mapColumn(",
						"          brand_code,",
						"          brand_url_code,",
						"          brand_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"ProductDeta select(mapColumn(",
						"          department_code,",
						"          category_code,",
						"          series_code,",
						"          brand_code,",
						"          min_standard_days_to_ship,",
						"          max_standard_days_to_ship,",
						"          direct_cart_type,",
						"          price_check_less_flag,",
						"          min_standard_unit_price,",
						"          max_standard_unit_price,",
						"          min_price_per_piece,",
						"          max_price_per_piece",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select1 window(over(department_code,",
						"          category_name,",
						"          category_code),",
						"     asc(department_code, true),",
						"     Rank = rowNumber()) ~> IdentifyingDuplicates",
						"IdentifyingDuplicates filter(Rank==1) ~> RemovingDuplicates",
						"RemovingDuplicates select(mapColumn(",
						"          department_code,",
						"          category_code,",
						"          category_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectReqCol",
						"select2 window(over(series_code),",
						"     asc(series_code, true),",
						"     Rank = rowNumber()) ~> FindingDuplicates",
						"FindingDuplicates filter(Rank==1) ~> RemovingDuplicate",
						"RemovingDuplicate select(mapColumn(",
						"          series_code,",
						"          series_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRequiredColumns",
						"select3 window(over(brand_code,",
						"          brand_url_code),",
						"     asc(brand_code, true),",
						"     Rank = rowNumber()) ~> DuplicateFinding",
						"DuplicateFinding filter(Rank==1) ~> DuplicateRemoving",
						"DuplicateRemoving select(mapColumn(",
						"          brand_code,",
						"          brand_url_code,",
						"          brand_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemovingRankCol",
						"selectReqCol sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dim',",
						"     tableName: 'Category',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> CategoryDimension",
						"selectRequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dim',",
						"     tableName: 'Series',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> SeriesDimension",
						"RemovingRankCol sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dim',",
						"     tableName: 'Brand',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> BrandDimension",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'fact',",
						"     tableName: 'ProductData',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> FactTable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Reporting')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Web Scraping Data Flows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Fact",
								"type": "DatasetReference"
							},
							"name": "FactTable"
						},
						{
							"dataset": {
								"referenceName": "DS_Category_Dimension",
								"type": "DatasetReference"
							},
							"name": "CategoryDimension"
						},
						{
							"dataset": {
								"referenceName": "DS_Fact",
								"type": "DatasetReference"
							},
							"name": "FactProductTable"
						},
						{
							"dataset": {
								"referenceName": "DS_Brand_Dimension",
								"type": "DatasetReference"
							},
							"name": "BrandDimension"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "AvgPrices"
						},
						{
							"linkedService": {
								"referenceName": "LS_Sql",
								"type": "LinkedServiceReference"
							},
							"name": "AvgShippingTimes"
						}
					],
					"transformations": [
						{
							"name": "AvgMinMaxPricePerUnit"
						},
						{
							"name": "JoiningFactCategoryDime"
						},
						{
							"name": "JoiningFactBrandDimension"
						},
						{
							"name": "AvgMinMaxDaysToShip"
						}
					],
					"scriptLines": [
						"source(output(",
						"          department_code as string,",
						"          category_code as string,",
						"          series_code as float,",
						"          brand_code as string,",
						"          min_standard_days_to_ship as integer,",
						"          max_standard_days_to_ship as integer,",
						"          direct_cart_type as integer,",
						"          price_check_less_flag as integer,",
						"          min_standard_unit_price as double,",
						"          max_standard_unit_price as double,",
						"          min_price_per_piece as double,",
						"          max_price_per_piece as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> FactTable",
						"source(output(",
						"          department_code as string,",
						"          category_code as string,",
						"          category_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CategoryDimension",
						"source(output(",
						"          department_code as string,",
						"          category_code as string,",
						"          series_code as float,",
						"          brand_code as string,",
						"          min_standard_days_to_ship as integer,",
						"          max_standard_days_to_ship as integer,",
						"          direct_cart_type as integer,",
						"          price_check_less_flag as integer,",
						"          min_standard_unit_price as double,",
						"          max_standard_unit_price as double,",
						"          min_price_per_piece as double,",
						"          max_price_per_piece as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> FactProductTable",
						"source(output(",
						"          brand_code as string,",
						"          brand_url_code as string,",
						"          brand_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> BrandDimension",
						"JoiningFactCategoryDime aggregate(groupBy(category_name),",
						"     avg_min_standard_unit_price = avg(min_price_per_piece),",
						"          avg_max_standard_unit_price = avg(max_standard_unit_price)) ~> AvgMinMaxPricePerUnit",
						"FactTable, CategoryDimension join(FactTable@category_code == CategoryDimension@category_code,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningFactCategoryDime",
						"FactProductTable, BrandDimension join(FactProductTable@brand_code == BrandDimension@brand_code,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoiningFactBrandDimension",
						"JoiningFactBrandDimension aggregate(groupBy(BrandDimension@brand_code),",
						"     avg_min_standard_days_to_ship = avg(min_standard_days_to_ship),",
						"          avg_max_standard_days_to_ship = avg(max_standard_days_to_ship)) ~> AvgMinMaxDaysToShip",
						"AvgMinMaxPricePerUnit sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'report',",
						"     tableName: 'AvgPrices',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AvgPrices",
						"AvgMinMaxDaysToShip sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'report',",
						"     tableName: 'AvgShippingTimes',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     recreate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AvgShippingTimes"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Move_Postgres_To_Sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Moving User to Sql",
						"description": "Copying User data from Postgres DB to Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Postgres_User",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Sql_User",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Moving Event to Sql",
						"description": "Copying Event data from Postgres DB to Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Postgres_Event",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Sql_Event",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Moving Booking to Sql",
						"description": "Copying Booking data from Postgres DB to Azure SQL DB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "PostgreSqlV2Source"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Postgres_Booking",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Sql_Booking",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "FullStack Project Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-29T05:59:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Move_To_Prep')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Cleaning Data",
						"description": "Cleaning the data using data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Cleaning_Data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"UserTable": {},
									"EventTable": {},
									"BookingTable": {},
									"CleanedUserTable": {},
									"CleanedEventTable": {},
									"CleanedBookingTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "FullStack Project Pipelines"
				},
				"annotations": [],
				"lastPublishTime": "2024-08-29T05:59:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Cleaning_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Move_To_Report')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ReportingTable",
						"description": "Generating reporting table using dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Reporting_Data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"UserTable": {},
									"BookingTable": {},
									"EventTable": {},
									"EventTab": {},
									"LocationBasedEvents": {},
									"MonthBasedEvents": {},
									"CountOfBookingPerUser": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "FullStack Project Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Reporting_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Move_Data_To_Prep')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Cleaning Data",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Cleaning",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ProductDetails": {},
									"CleanedProductDetails": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Web Scraping Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Cleaning')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Create_Fact_Dim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fact and Dimension Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Fact_And_Dimension",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CleanedProductData": {},
									"ProductDetails": {},
									"ProductData": {},
									"ProductDeta": {},
									"CategoryDimension": {},
									"SeriesDimension": {},
									"BrandDimension": {},
									"FactTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Web Scraping Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Fact_And_Dimension')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Move_Table_Report')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Creating Reporting Table",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Reporting",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"FactTable": {},
									"CategoryDimension": {},
									"FactProductTable": {},
									"BrandDimension": {},
									"AvgPrices": {},
									"AvgShippingTimes": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Web Scraping Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Reporting')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Postgres To Sql",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Move_Postgres_To_Sql",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Moving data to prep",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Postgres To Sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Move_To_Prep",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Reporting Tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Moving data to prep",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Move_To_Report",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "FullStack Project Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Move_Postgres_To_Sql')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Move_To_Prep')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Move_To_Report')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Main_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move from blob to sql",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Move_Data_Blob_To_Sql",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Move data to Prep",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Move from blob to sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Move_Data_To_Prep",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Create Fact and Dimension Tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Move data to Prep",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Create_Fact_Dim",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Creating Reporting Table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Fact and Dimension Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_Move_Table_Report",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Web Scraping Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_Move_Data_Blob_To_Sql')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Move_Data_To_Prep')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Create_Fact_Dim')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Move_Table_Report')]"
			]
		}
	]
}